// Code generated by protoc-gen-go.
// source: singularity.proto
// DO NOT EDIT!

package singularity

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Scope int32

const (
	Scope_LOCAL    Scope = 0
	Scope_REGIONAL Scope = 1
	Scope_GLOBAL   Scope = 2
)

var Scope_name = map[int32]string{
	0: "LOCAL",
	1: "REGIONAL",
	2: "GLOBAL",
}
var Scope_value = map[string]int32{
	"LOCAL":    0,
	"REGIONAL": 1,
	"GLOBAL":   2,
}

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}
func (x Scope) String() string {
	return proto.EnumName(Scope_name, int32(x))
}
func (x Scope) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *Scope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Scope_value, data, "Scope")
	if err != nil {
		return err
	}
	*x = Scope(value)
	return nil
}

type Command struct {
	Command          []byte   `protobuf:"bytes,1,req,name=command" json:"command,omitempty"`
	Args             [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	Timeout          *uint32  `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (this *Command) Reset()         { *this = Command{} }
func (this *Command) String() string { return proto.CompactTextString(this) }
func (*Command) ProtoMessage()       {}

func (this *Command) GetCommand() []byte {
	if this != nil {
		return this.Command
	}
	return nil
}

func (this *Command) GetTimeout() uint32 {
	if this != nil && this.Timeout != nil {
		return *this.Timeout
	}
	return 0
}

type StillAlive struct {
	XXX_unrecognized []byte `json:"-"`
}

func (this *StillAlive) Reset()         { *this = StillAlive{} }
func (this *StillAlive) String() string { return proto.CompactTextString(this) }
func (*StillAlive) ProtoMessage()       {}

type CommandFinished struct {
	ExitCode         *int32 `protobuf:"varint,1,req,name=exit_code" json:"exit_code,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (this *CommandFinished) Reset()         { *this = CommandFinished{} }
func (this *CommandFinished) String() string { return proto.CompactTextString(this) }
func (*CommandFinished) ProtoMessage()       {}

func (this *CommandFinished) GetExitCode() int32 {
	if this != nil && this.ExitCode != nil {
		return *this.ExitCode
	}
	return 0
}

type CommandOutput struct {
	Stdout           []byte `protobuf:"bytes,1,opt,name=stdout" json:"stdout,omitempty"`
	Stderr           []byte `protobuf:"bytes,2,opt,name=stderr" json:"stderr,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (this *CommandOutput) Reset()         { *this = CommandOutput{} }
func (this *CommandOutput) String() string { return proto.CompactTextString(this) }
func (*CommandOutput) ProtoMessage()       {}

func (this *CommandOutput) GetStdout() []byte {
	if this != nil {
		return this.Stdout
	}
	return nil
}

func (this *CommandOutput) GetStderr() []byte {
	if this != nil {
		return this.Stderr
	}
	return nil
}

type Event struct {
	Name             []byte `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Scope            *Scope `protobuf:"varint,2,opt,name=scope,enum=singularity.Scope,def=0" json:"scope,omitempty"`
	Payload          []byte `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (this *Event) Reset()         { *this = Event{} }
func (this *Event) String() string { return proto.CompactTextString(this) }
func (*Event) ProtoMessage()       {}

const Default_Event_Scope Scope = Scope_LOCAL

func (this *Event) GetName() []byte {
	if this != nil {
		return this.Name
	}
	return nil
}

func (this *Event) GetScope() Scope {
	if this != nil && this.Scope != nil {
		return *this.Scope
	}
	return Default_Event_Scope
}

func (this *Event) GetPayload() []byte {
	if this != nil {
		return this.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("singularity.Scope", Scope_name, Scope_value)
}
